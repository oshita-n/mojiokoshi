import Head from 'next/head'
import { BsMicMuteFill, BsMicFill, BsMicMute } from 'react-icons/bs';
import React, { useState, useEffect, useRef } from 'react';

export default function Home() {
  const [isActive, setIsActive] = useState(false);
  const soundClips = useRef([]);

  // 再描画の影響を受けない不変なオブジェクト
  let chunks: any = [];
  const constraints = { audio: true };
  let mediaRecorder = [];

  // 初期化
  useEffect(() => {
    const access_record = async () => {
      const stream = await navigator.mediaDevices.getUserMedia({audio: true});
      mediaRecorder = new MediaRecorder(stream);
    }
    access_record();
  }, []);


  const setListeners = () => {
    mediaRecorder.ondataavailable = handleOnDataAvailable;
    mediaRecorder.onstop = handleOnStop;
  };

  const handleOnDataAvailable = ({ data }) => {
    if (data.size > 0) {
      chunks.push(data);
    }
  };

  const handleOnStop = () => {
    console.log("data available after MediaRecorder.stop() called.");

    const clipName = ""//prompt('Enter a name for your sound clip?','My unnamed clip');

    const clipContainer = document.createElement('article');
    const audio = document.createElement('audio');

    clipContainer.classList.add('clip');
    audio.setAttribute('controls', '');
   
    clipContainer.appendChild(audio);
    soundClips.current.appendChild(clipContainer);
    console.log(soundClips);
    audio.controls = true;
    const blob = new Blob(chunks, { 'type' : 'audio/mp3; codecs=opus' });
    chunks = [];
    const audioURL = window.URL.createObjectURL(blob);
    audio.src = audioURL;
    console.log("recorder stopped");
  };

  const handleClickRecord = ()=> {
    if(mediaRecorder.state == 'inactive'){
      console.log(mediaRecorder);
      setListeners()
      console.log(mediaRecorder);
      mediaRecorder.start(1000);
      console.log(mediaRecorder);
      console.log(mediaRecorder.state);
    }

  }

  const handleClickStop = ()=> {
    if(mediaRecorder.state == 'recording'){
      console.log(mediaRecorder);
      mediaRecorder.stop();
      console.log(mediaRecorder.state);
      console.log("recorder stopped");
    }
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='flex flex-col justify-items-center items-center'>
        <div className='flex flex-col m-10 gap-4'>
          <div>
            俺はスーパーマンじゃねぇから世界中の人を守るなんてデケーことは言えねぇけど<br/>
            両手で抱えられるだけの人を守れればそれでいい。<br/>
            なんて言えるほど控えめな人間でもねぇんだ<br/>
            俺は山ほどの人を守りてぇんだ
          </div>
        </div>

      
      <section ref={soundClips}>
      </section>
      <div className='fixed bottom-0 mb-10 text-2xl'>
      <div>
        <button  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-4" onClick={handleClickRecord}>録音</button>
        <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" onClick={handleClickStop}>停止</button>
      </div>
      </div>
      
      </div>
    </div>
  )
}
